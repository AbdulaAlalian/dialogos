package com.clt.gui;import java.awt.Color;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import javax.swing.JScrollPane;import javax.swing.JTextArea;import javax.swing.ScrollPaneConstants;public class TextBox extends JScrollPane {  private JTextArea textArea;  public TextBox() {    this(null);  }  public TextBox(int rows) {    this(null, rows, 0);  }  public TextBox(int rows, int columns) {    this(null, rows, columns);  }  public TextBox(String s) {    this(s, 5, 0);  }  public TextBox(String s, int rows, int columns) {    this.textArea = new JTextArea(rows, columns) {      @Override      protected void processComponentKeyEvent(KeyEvent e) {        // swallow and ignore key events      }      @Override      public void paste() {        // disable pasting      }    };    this.resetKeyboardActions();    this.textArea.getKeymap().removeBindings();    this.textArea.setEditable(false);    // textArea.setEnabled(false);    // textArea.setDisabledTextColor(Color.BLACK);    this.textArea.setLineWrap(true);    this.textArea.setWrapStyleWord(true);    this.setViewportView(this.textArea);    this      .setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);    this      .setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);    GUI.setupScrollBar(this.getVerticalScrollBar());    if (s != null) {      this.setText(s);    }  }  @Override  public synchronized void addKeyListener(KeyListener l) {    super.addKeyListener(l);    this.textArea.addKeyListener(l);  }  @Override  public synchronized void removeKeyListener(KeyListener l) {    super.removeKeyListener(l);    this.textArea.removeKeyListener(l);  }  public void setText(String s) {    this.textArea.setFont(this.getFont());    this.textArea.setText(s);    this.textArea.setCaretPosition(0);  }  @Override  public void updateUI() {    super.updateUI();    this.adjustSize();  }  private void adjustSize() {    /*     * Dimension d = getPreferredSize(); setMinimumSize(d); setMaximumSize(d);     */}  @Override  public void setForeground(Color fg) {    if (this.textArea != null) {      this.textArea.setForeground(fg);    }    else {      // do nothing.    }  }  /**   * Appends a String to the currently displayed text.   *    * @param str   *          String to be appended.   */  public void append(String str) {    this.textArea.append(str);  }}