/* * @(#)JavaEditorKit.java	1.2 98/05/04 * * Copyright (c) 1998 Sun Microsystems, Inc. All Rights Reserved. * * This software is the confidential and proprietary information of Sun * Microsystems, Inc. ("Confidential Information").  You shall not * disclose such Confidential Information and shall use it only in * accordance with the terms of the license agreement you entered into * with Sun. * * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE * SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR * PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR ANY DAMAGES * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING * THIS SOFTWARE OR ITS DERIVATIVES. * */package com.clt.gui.editor;import javax.swing.text.DefaultEditorKit;import javax.swing.text.Document;import javax.swing.text.ViewFactory;/** * This kit supports a fairly minimal handling of editing java text content. It * supports syntax highlighting and produces the lexical structure of the * document as best it can. *  * @author Timothy Prinzing * @version 1.2 05/04/98 */public class SyntaxEditorKit    extends DefaultEditorKit {  private SyntaxContext preferences;  private Scanner scanner;  public SyntaxEditorKit(Scanner scanner) {    super();    this.scanner = scanner;    this.preferences = new SyntaxContext(scanner);  }  // --- EditorKit methods -------------------------  /**   * Get the MIME type of the data that this kit represents support for. This   * kit supports the type <code>text/code</code>.   */  @Override  public String getContentType() {    return "text/code";  }  /**   * Create a copy of the editor kit. This allows an implementation to serve as   * a prototype for others, so that they can be quickly created.   */  @Override  public Object clone() {    SyntaxEditorKit kit = new SyntaxEditorKit(this.scanner);    kit.preferences = this.preferences;    return kit;  }  /**   * Creates an uninitialized text storage model that is appropriate for this   * type of editor.   *    * @return the model   */  @Override  public Document createDefaultDocument() {    return new SyntaxDocument(this.scanner);  }  /**   * Fetches a factory that is suitable for producing views of any models that   * are produced by this kit. The default is to have the UI produce the   * factory, so this method has no implementation.   *    * @return the view factory   */  @Override  public final ViewFactory getViewFactory() {    return this.preferences;  }}