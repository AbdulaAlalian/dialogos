package com.clt.util;import java.io.File;import java.io.FileFilter;import java.io.IOException;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;public class DiskTools {    private static Object createMRJType(String s) {        try {            Class<?> c = Class.forName("com.apple.mrj.MRJOSType");            Constructor<?> cons = c.getConstructor(new Class[]{String.class});            return cons.newInstance(new Object[]{s});        } catch (Exception exn) {            return null;        }    }    public static void setFileCreator(File f, String creator) throws IOException {        try {            Class<?> c = Class.forName("com.apple.mrj.MRJFileUtils");            Method m = c.getMethod("setFileCreator",                     new Class[]{File.class, Class.forName("com.apple.mrj.MRJOSType")});            m.invoke(null, new Object[]{f, DiskTools.createMRJType(creator)});        } catch (InvocationTargetException exn) {            if (exn.getTargetException() instanceof IOException) {                throw (IOException) exn.getTargetException();            } else {                throw new IOException(exn.getTargetException().getLocalizedMessage());            }        } catch (Exception exn) {            throw new IOException(exn.getLocalizedMessage());        }    }    public static void setFileType(File f, String type) throws IOException {        try {            Class<?> c = Class.forName("com.apple.mrj.MRJFileUtils");            Method m = c.getMethod("setFileType", new Class[]{File.class, Class.forName("com.apple.mrj.MRJOSType")});            m.invoke(null, new Object[]{f, DiskTools.createMRJType(type)});        } catch (InvocationTargetException exn) {            if (exn.getTargetException() instanceof IOException) {                throw (IOException) exn.getTargetException();            } else {                throw new IOException(exn.getTargetException().getLocalizedMessage());            }        } catch (Exception exn) {            throw new IOException(exn.getLocalizedMessage());        }    }    public static String getFileCreator(File f) throws IOException {        try {            Class<?> c = Class.forName("com.apple.mrj.MRJFileUtils");            Method m = c.getMethod("getFileCreator", new Class[]{File.class});            return (String) m.invoke(null, new Object[]{f});        } catch (InvocationTargetException exn) {            if (exn.getTargetException() instanceof IOException) {                throw (IOException) exn.getTargetException();            } else {                throw new IOException(exn.getTargetException().getLocalizedMessage());            }        } catch (Exception exn) {            // Couldn't find the class            return null;        }    }    public static String getFileType(File f) throws IOException {        try {            Class<?> c = Class.forName("com.apple.mrj.MRJFileUtils");            Method m = c.getMethod("getFileType", new Class[]{File.class});            return (String) m.invoke(null, new Object[]{f});        } catch (InvocationTargetException exn) {            if (exn.getTargetException() instanceof IOException) {                throw (IOException) exn.getTargetException();            } else {                throw new IOException(exn.getTargetException().getLocalizedMessage());            }        } catch (Exception exn) {            // Couldn't find the class            return null;        }    }    /**     * Create <code>f</code> if it doesn't exist yet.     *     * @deprecated Use {@link java.io.File#createNewFile()} instead.     */    @Deprecated    public static boolean createFile(File f) throws IOException {        return f.createNewFile();    }    @Deprecated    public static File createTempFile(File dir) {        int index = 0;        File f;        if (!dir.exists()) {            if (!dir.mkdirs()) {                return null;            }        }        do {            f = new File(dir, "clt" + index + ".tmp");            index++;        } while (f.exists());        try {            if (DiskTools.createFile(f)) {                return f;            } else {                return null;            }        } catch (IOException e) {            return null;        }    }    /**     * Recursively count the number of files in the given directory.     */    public static int countFiles(File dir) {        return DiskTools.countFiles(dir, null);    }    /**     * Recursively count the number of files in the given directory using the     * given filter. The filter is used to decide which files and subdirectories     * should be included in the calculation.     */    public static int countFiles(File dir, FileFilter filter) {        if (!dir.isDirectory()) {            return 0;        } else {            File[] files = dir.listFiles(filter);            if (files == null) {                return 0;            } else {                int n = 0;                for (int i = 0; i < files.length; i++) {                    if (files[i].isDirectory()) {                        n += DiskTools.countFiles(files[i], filter);                    } else {                        n++;                    }                }                return n;            }        }    }    public static File makeRelative(File f, boolean force) {        String localPath                = new File(System.getProperty("user.dir")).getAbsolutePath();        if (localPath.endsWith(".")) {            localPath = localPath.substring(0, localPath.length() - 1);        }        if (!localPath.endsWith(File.separator)) {            localPath += File.separator;        }        String path = f.getAbsolutePath();        if (path.startsWith(localPath)) {            return new File(path.substring(localPath.length()));        } else {            if (force) {                String prefix = "";                while (!path.startsWith(localPath)) {                    prefix += ".." + File.separator;                    File parent = new File(localPath).getParentFile();                    if (parent == null) {                        return f;                    } else {                        localPath = parent.getAbsolutePath();                        if (!localPath.endsWith(File.separator)) {                            localPath += File.separator;                        }                    }                }                path = path.substring(localPath.length());                return new File(prefix + path);            } else {                return f;            }        }    }}