package com.clt.event;

import java.util.EventObject;

/**
 * A semantic event that a long lasting action has made some progress. This
 * event is generated by actions that wish to provide some feedback about the
 * progress of the action. Classes can implement the interface
 * <code>ProgressListener</code> to receive such feedback and respond to it,
 * e.g. by displaying a statusbar to the user. An action is associated with a
 * name and an interval of start and end values. The current progress value
 * ranges from <code>start</code> to <code>end</code>.
 *
 * @see ProgressListener
 * @see com.clt.util.LongAction
 * @see com.clt.gui.ProgressDialog
 * @author Ronald Bieber
 */
public class ProgressEvent extends EventObject {

    private String message;

    private long start;

    private long end;

    private long current;

    /**
     * Constructs an empty <code>ProgressEvent</code>
     *
     * @param source the action that originated the event
     */
    public ProgressEvent(Object source) {

        this(source, null);
    }

    /**
     * Constructs a named <code>ProgressEvent</code> with default status.
     * Usefull if you only want to display what the action is doing without
     * actually monitoring the progress is detail.
     *
     * @param source the action that originated the event
     * @param message the name of the action
     */
    public ProgressEvent(Object source, String message) {

        this(source, message, 0, 0, 0);
    }

    /**
     * Constructs a named <code>ProgressEvent</code> with a specific state.
     *
     * @param source the action that originated the event
     * @param message the name of the action
     * @param start the progress value when the action starts (usually 0)
     * @param end the progress value that indicates that the action is done
     * @param current the current progress value
     */
    public ProgressEvent(Object source, String message, long start, long end, long current) {
        super(source);

        this.setMessage(message);
        this.setValues(start, end, current);
    }

    /**
     * Set the name of the action
     *
     * @param message a description of the action
     */
    public void setMessage(String message) {

        this.message = message;
    }

    /**
     * Get the name of the action
     */
    public String getMessage() {

        return this.message;
    }

    /**
     * Set the initial progress value of the action
     *
     * @param start the value that indicates that the action has not made any
     * progress yet
     */
    public void setStart(long start) {

        this.start = start;
        if (this.end < start) {
            this.end = start;
        }
        if (this.current < start) {
            this.current = start;
        }
    }

    public long getStart() {

        return this.start;
    }

    /**
     * Set the final progress value of the action
     *
     * @param end the value that indicates that the action has finished
     */
    public void setEnd(long end) {

        this.end = end;
        if (this.start > end) {
            this.start = end;
        }
        if (this.current > end) {
            this.current = end;
        }
    }

    public long getEnd() {

        return this.end;
    }

    /**
     * Set the current progress value of the action
     *
     * @param current the current progress value of the action
     */
    public void setCurrent(long current) {

        if (current < this.start) {
            this.current = this.start;
        } else if (current > this.end) {
            this.current = this.end;
        } else {
            this.current = current;
        }
    }

    /**
     * Get the current progress value.
     */
    public long getCurrent() {

        return this.current;
    }

    /**
     * Set start, end and current progress value in one call.
     *
     * @param start
     * @param end
     * @param current
     */
    public void setValues(long start, long end, long current) {

        if (end < start) {
            throw new IllegalArgumentException(end + " < " + start);
        }
        if (current < start) {
            throw new IllegalArgumentException(current + " < " + start);
        }
        if (current > end) {
            throw new IllegalArgumentException(current + " > " + end);
        }

        this.start = start;
        this.end = end;
        this.current = current;
    }

    public double getPercentComplete() {

        if (this.end == this.start) {
            return 0.0;
        } else {
            return (double) (this.current - this.start)
                    / (double) (this.end - this.start);
        }
    }
}
